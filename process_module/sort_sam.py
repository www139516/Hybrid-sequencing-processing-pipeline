"""
This module is used for sort the sam file generated by minimap2 or gmap. The sorted file can be used by the program collapsed_isoform_by_sam.py.
"""

"""
m54286_190414_205743/4522257/ccs	0	2	163079620	60	405M550S	*	0	0	AAACATCAACCCAT	*	NM:i:0	ms:i:810	AS:i:810	nn:i:0	tp:A:P	cm:i:70	s1:i:402	s2:i:0	de:f:0	SA:Z:2,163081370,+,400S555M155D,60,155;	rl:i:0
m54286_190414_205743/4522257/ccs	2048	2	163081370	60	400H227M155D328M	*	0	0	AGGACAT	*	NM:i:155	ms:i:796	AS:i:931	nn:i:0	tp:A:P	cm:i:107	s1:i:525	s2:i:0	de:f:0.0018	SA:Z:2,163079620,+,405M550S,60,0;	rl:i:0
m54286_190414_205743/5702048/ccs	16	1	182484848	60	1S101M1I2162M1I481M	*	0	0	ag	*	NM:i:2	ms:i:5476	AS:i:5476	nn:i:0	tp:A:P	cm:i:508	s1:i:2724	s2:i:774	de:f:0.0007	rl:i:0

"""
import re
import os
import subprocess

class SortSamFiles():
    def __init__(self):
        self._param_proj = ''
        self._sam_fpath = ''
        self._sam_dpath = ''
        self._read_len = 0
        self._read_mismatch = ''
        self._mapping_qual = 0
        self._max_mismatch = 0
        self._accur = 0
        self._in_sam_fname = ''
        self._in_sam_pre_fname = ''
        self._out_fil_sam_fname = ''
        self._out_fil_sam_fpath = ''
        self._out_sorted_fil_sam_fname = ''
        self._out_sorted_fil_sam_fpath = ''
        
    def fit(self, param_proj, sam_fpath):
        self._param_proj = param_proj
        self._sam_fpath = self._param_proj.get(
            'step_6_filter_and_sort_sam_file_parameters', 'sam_fpath')
        if self._sam_fpath.lower() == 'auto':
            self._sam_fpath = sam_fpath
        self._mapping_qual = self._param_proj.get(
            'step_6_filter_and_sort_sam_file_parameters', 'mapping_qual')
        self._max_mismatch = self._param_proj.get(
            'step_6_filter_and_sort_sam_file_parameters', 'max_mismatch')

        self._in_sam_fname = os.path.basename(self._sam_fpath)
        self._sam_dpath = os.path.dirname(self._sam_fpath)
        self._in_sam_pre_fname = self._in_sam_fname.split('.sam')[0]
        self._out_fil_sam_fname = '{}_filtered.sam'.format(self._in_sam_pre_fname)
        self._out_fil_sam_fpath = os.path.join(self._sam_dpath, self._out_fil_sam_fname)
        self._out_sorted_fil_sam_fname = '{}_filtered.sorted.sam'.format(
            self._in_sam_pre_fname)
        self._out_sorted_fil_sam_fpath = os.path.join(self._sam_dpath, self._out_sorted_fil_sam_fname)
        return self

    def __get_read_accurency(self, line):
        line = line
        if 'NM:i:' in line:
            self._read_len = len(line.split('\t')[9])
            self._read_mismatch = int(re.findall(".+NM:i:(\d+)", line)[0])
            self._accur = self._read_mismatch/self._read_len
        return self._accur

    def sort_filter_sam(self): 
        print('The input sam file path is {}'.format(self._sam_fpath))
        print('Filtering the sam file...')    
        handle_fil_file = open(self._out_fil_sam_fpath, 'w')
        for line in open(self._sam_fpath, 'r'):
            if line.startswith('@'):
                handle_fil_file.writelines(line)
            else:
                if ( int(line.split('\t')[4]) >= int(self._mapping_qual) ) and ( self.__get_read_accurency(line) <= float(self._max_mismatch) ):
                    handle_fil_file.writelines(line)
        handle_fil_file.close()

        print('Sorting the filtered sam file...')
        cmd_sort = 'sort -k 3,3 -k 4,4n {filter_sam_fpath} > {sorted_filter_sam_fpath}'.format(
            filter_sam_fpath=self._out_fil_sam_fpath,
            sorted_filter_sam_fpath = self._out_sorted_fil_sam_fpath
        )
       	if subprocess.check_call(cmd_sort, shell=True) != 0:
            raise SystemCommandError
        return self._out_sorted_fil_sam_fpath

